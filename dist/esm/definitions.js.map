{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\r\n\r\nexport interface PermissionStatus {\r\n  /**\r\n   * Permission state for speechRecognition alias.\r\n   *\r\n   * On Android it requests/checks RECORD_AUDIO permission\r\n   *\r\n   * On iOS it requests/checks the speech recognition and microphone permissions.\r\n   *\r\n   * @since 5.0.0\r\n   */\r\n  speechRecognition: PermissionState;\r\n}\r\n\r\nexport interface SpeechRecognitionPlugin {\r\n  /**\r\n   * This method will check if speech recognition feature is available on the device.\r\n   * @param none\r\n   * @returns available - boolean true/false for availability\r\n   */\r\n  available(): Promise<{ available: boolean }>;\r\n  /**\r\n   * This method will start to listen for utterance.\r\n   *\r\n   * if `partialResults` is `true`, the function respond directly without result and\r\n   * event `partialResults` will be emit for each partial result, until stopped.\r\n   *\r\n   * @param options\r\n   * @returns void or array of string results\r\n   */\r\n  start(options?: UtteranceOptions): Promise<{ matches?: string[] }>;\r\n  /**\r\n   * This method will stop listening for utterance\r\n   * @param none\r\n   * @returns void\r\n   */\r\n  stop(): Promise<void>;\r\n  /**\r\n   * This method will return list of languages supported by the speech recognizer.\r\n   *\r\n   * It's not available on Android 13 and newer.\r\n   *\r\n   * @param none\r\n   * @returns languages - array string of languages\r\n   */\r\n  getSupportedLanguages(): Promise<{ languages: any[] }>;\r\n  /**\r\n   * This method will check for audio permissions.\r\n   * @param none\r\n   * @returns permission - boolean true/false if permissions are granted\r\n   *\r\n   * @deprecated use `checkPermissions()`\r\n   */\r\n  hasPermission(): Promise<{ permission: boolean }>;\r\n\r\n  /**\r\n   * This method will check if speech recognition is listening.\r\n   * @param none\r\n   * @returns boolean true/false if speech recognition is currently listening\r\n   */\r\n  isListening(): Promise<{ listening: boolean }>;\r\n  /**\r\n   * This method will prompt the user for audio permission.\r\n   * @param none\r\n   * @returns void\r\n   *\r\n   * @deprecated use `requestPermissions()`\r\n   */\r\n  requestPermission(): Promise<void>;\r\n  /**\r\n   * Check the speech recognition permission.\r\n   *\r\n   * @since 5.0.0\r\n   */\r\n  checkPermissions(): Promise<PermissionStatus>;\r\n  /**\r\n   * Request the speech recognition permission.\r\n   *\r\n   * @since 5.0.0\r\n   */\r\n  requestPermissions(): Promise<PermissionStatus>;\r\n  /**\r\n   * Called when partialResults set to true and result received.\r\n   *\r\n   * On Android it doesn't work if popup is true.\r\n   *\r\n   * Provides partial result.\r\n   *\r\n   * @since 2.0.2\r\n   */\r\n  addListener(\r\n    eventName: 'partialResults',\r\n    listenerFunc: (data: { matches: string[] }) => void,\r\n  ): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Called when listening state changed.\r\n   *\r\n   * @since 6.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'listeningState',\r\n    listenerFunc: (data: { status: 'started' | 'stopped' }) => void,\r\n  ): Promise<PluginListenerHandle>;\r\n  /**\r\n   * Remove all the listeners that are attached to this plugin.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  removeAllListeners(): Promise<void>;\r\n}\r\n\r\nexport interface UtteranceOptions {\r\n  /**\r\n   * key returned from `getSupportedLanguages()`\r\n   */\r\n  language?: string;\r\n  /**\r\n   * maximum number of results to return (5 is max)\r\n   */\r\n  maxResults?: number;\r\n  /**\r\n   * prompt message to display on popup (Android only)\r\n   */\r\n  prompt?: string;\r\n  /**\r\n   * display popup window when listening for utterance (Android only)\r\n   */\r\n  popup?: boolean;\r\n  /**\r\n   * return partial results if found\r\n   */\r\n  partialResults?: boolean;\r\n}\r\n"]}